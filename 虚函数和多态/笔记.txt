虚函数和多态

#----------------
引出虚函数

使用基类指针指向对象
调用同一个函数
产生不同效果

没用虚函数时
在指针赋值时
需要进行强制类型转化
才能输出对应的结果

（指针直接指向派生类对象）

------------------------------

直接指向基类对象而不强转
只需将对应函数改为虚函数

---------------------------

虚函数会对应一个虚表
一开始地址不确定
运行时动态分配函数地址


--------------------------

#多态性
同一个函数名有不同的实现
在不同情况有不同的解释


在同一个类中
即函数重载，
属于编译时的多态

在派生类中
与基类同名同参同返回
属于运行时多态

运算符重载

---------------

#联编
分为两大类

静态联编，即编译时联编
编译时将标识符与地址联系

动态联编，即运行时联编
在程序运行时，
将函数绑定到具体的函数实现

-------------------------

##虚函数的定义
在基类中以关键字virtual说明
在派生类中重新定义的非静态成员函数

基类的虚函数在派生类中仍然是虚函数
在派生类中重定义继承成员虚函数
该函数仍然是虚函数

（最好加上virtual）

virtual int get()；

若没有重写，访问父类的虚函数

--------------------------

如何实现动态联编
只有采用指向基类对象的指针或引用
来调用虚函数，才会采用动态联编

如果将子类赋值给基类对象
无法实现动态联编

普通对象调用虚函数不能实现动态联编

虚函数必须有public或protected访问权限

-----------------------------

静态成员，
内联函数  inline(用于加快速度
友元函数
构造函数
都不能说明为虚函数

析构函数可以为虚函数

析构函数建议为虚函数
但是构造函数和析构函数不能调用虚函数

------------------------------

析构函数不是虚函数的话
析构基类指针时只会调用基类的析构函数

是虚函数的话
析构指向子类的基类指针时
会先析构子类对象，再析构基类对象

-----------------------------

何时考虑使用虚函数

成员函数使用的类是基类
子类需要改变该成员函数
通过基类指针或引用调用

使用虚函数

----------------------------

纯虚函数

为了实现接口重用
必须以虚函数的形式
在基类为派生类定义一个接口

基类虚函数有时无具体实现

物理上无法实现
逻辑上又不得不实现

可以使用纯虚函数

如果有纯虚函数

任何子类都必须重新定义该函数

virtual int get()=0；

----------------------------

抽象类

包含纯虚函数的类称为抽象类

无法实例化一个含有纯虚函数的抽象类

因而不能创建抽象类的对象

但是可以创建指向抽象类的指针或引用

----------------------------

访问权限使用基类的权限

若基类中虚函数是公有的
子类重写时放入私有

则可以使用基类调用子类重写的函数
但是不能直接在子类调用该函数

-----------------------------