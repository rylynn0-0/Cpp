#string

string是C++的一个类

--------------------------------------

string类
string的赋值与连接
比较
子串
交换
特性
寻找替换插入
转换成char*
迭代器
字符串流

------------------------------------------

string是一个模板类

定义如下
typedef basic_string<char>string;

使用string类要包含头文件<string>

---------------------

初始化
string s1="hello";拷贝构造函数
string s2("world");初始化
string s3;缺省的构造
string s4(5,'a');s4="aaaaa"
string s5(s1,2,3);从s1的下标为2开始，连续3个字符
string s6(s1,1);下从s1的下标为1开始到结尾

可以用char数组给string赋值

string s3(name,4);
name是char数组
表示将前四个字符赋值给string


-------------------------
若需要字符指针处理字符串
string s="hello";
char *p=&s[0];
sort(p,p+s.length(),cmp);
因为sort 只能处理基本数据类型

-----------------------

不允许单个字符或整数初始化
但是可以将字符赋值给对象

string s='s';error;

string s;
s='s'; OK

---------------------------

如果string太长会抛出length_error；
string内容不一定由\0结束
string长度用length（）读取
string支持流读取运算符 cin>>s;
string支持getline  getline(cin,s);
 
---------------------
getline()

哨兵默认是回车

可以设置哨兵字符
getline(cin,name,',');

陷阱
需要注意前面读取数据没有消掉回车

getline没有读取字符会返回false
string s;
while(getline(cin,s)){
cout<<s<<endl;
}

-------------------------
字符串流 
stringstream

string s="abc def ghi",a;
stringstream ss(s);

while(ss>>a)cout<<a<<endl;

------

string s="abc,def,ghi",a;
stringstream ss;
ss<<s;
while(getline(ss,a,','))
cout<<a<<endl;


----------------------------

string的赋值和连接

----------
用=进行赋值
string变量赋值
字符串常量
字符指针
单个字符
可显示的字符赋值

用assign成员函数进行赋值

string s1（“cat”）,s3;
s3.assign(s1);

assign（s1,1,3）s1,下标为1开始长度为3

assign(s1,2,string::npos)从2开始到结尾

assign（5，‘x’）5个x赋值给字符串

assign（“nico”,5）把nico赋值给字符串，长度为5

--------
string s1

s1[i]
s1.at(i)
越界时会报错，但是效率低

-----------------------------------
连接
用+进行连接

加号两边至少要有一个string的对象

s1="hello"+"world"; error

-----------
用append连接字符串
s1.append(s2);
s2.append(s1,3,s1.size());从3的下标开始到结尾

---------------------------------

比较（<,>,等）
返回值都是bool值

默认是逐位比较

compare
可以分开比较
==输出0；
大于输出1；
小于输出-1；

s1.compare(1,2,s3,0,3);
s1的1-2，s3的0-3进行比较

-----------------------------------

子串

substr

s2=s1.substr(4,5)从4开始5个字符
s2=s1.substr(4)从4开始到最后

swap（s1,s2）交换

------------------------------------

特性

capacity（）返回无需增加内存就可存的字符数
max_size（）返回可存最大字符数
length（）和size()相同返回长度
empty()返回string 是否为空

resize(n,c)改变对象长度，
比原来大会保留原来数据,
用c填充默认是空格
比原来小会截断尾部

------------------------------------
成员函数

find(str,n)
int pos =s1.find("lo")；
从n开始，从左往右查找第一次出现的位置
找不到就返回string::npos，

string::nops
是一个很大的无符号整数 用二进制表示全是1
使用带符号整数获取 是-1

rfind()从右往左寻找
找不到返回string::npos

find_first_of()
找到字符串中任意一个字符第一次出现的位置
find_last_of()
找到字符串中任意一个字符最后一次出现的位置
find_first_not_of()
找到字符串中任意一个字符第一次没有出现的位置
find_last__not_of()
找到字符串中任意一个字符最后一次没有出现的位置

erase()
s1.erase(5)删除下标5及之后的字符
s1.erase(5，2)删除下标5往后两个字符
s1.clear（）

s1.replace(2,3,"haha",1,2)
将s1第二个字符开始三个字符删去，插入haha第1个字符开始两个字符

s1.insert(2,s2,5,3)
将s2第5个字符开始连续3个字符插入s1下标为2的位置

-------------------------------------------

转换成char*字符串
c_char()会补'\0'   
data()不会补‘\0’
const char*p =s1.c_char();

指针没有开辟空间，只能读所以要用const

s1.copy(p2,5,0)

------------------------------------------

数字与字符串相互转换
#include<cstring>
int a;
s=to_string(a)

#include<bits/stdc++.h>
int a;
stringstream ss;
string s1;
ss<<a;
ss>>s1;


#include<string>
r=stof(a)//stoi,stod

-----------------------------------------
迭代器
string::const_iterator