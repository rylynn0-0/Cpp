函数模板

#-----------------
函数参数表中需要出现模板参数


template <class T>

void Swap(T& a,T &b){
	T temp=a;
	a=b;
	b=temp;
}


若类内含指针
尽量重写拷贝构造函数
重载赋值运算符
默认构造要赋值为0
delete要判断是否存在指针


填空题
看是否需要重载IO流

------------------------------

#二维数组函数模板化

使用一级指针存数组

使用指针数组

使用二级指针

---------------------------

指针数组需要实际建立指针数组才能使用

int a[2][3]={1,2,3,4,5,6};
int *b[2]={a[0],a[1]};
cout<<Max(b,2,3)<<endl;


--------------------------

重载函数模板

#问题

模板类型不能
将int转成float
导致传入参数不同时
不会进行隐式转化

-----------------
解决方案一

使用不同类型模板

template<class T,class D>
T Max(T a,D b){
return (a>b)?a:b;
}
------------------------
解决方案二

重载函数

int Max（int x,int y){
return (x>y)?x:y;
}

编译器检测到类型不同时
会进行隐式转化
再调用 int Max；


--------------------


#二义性

函数模板
int Max(int,float);
int Max(int,int);

Max(int,double);
出现(⊙o⊙)… 二义性

------------------------

#匹配规则

如果调用的实参与函数相同，调用

如果符合模板函数，调用

返回实参函数，看是否可以隐式转化

------------------------

#类模板

定义

将数据类型作为类的参数
参数类型可以是基本类型
也可以是结构体，类

声明格式

template<class T...>
class 类名{
   
}


在类外定义成员函数

template<模板参数表>
返回类型 类名<模板参数>::函数名{}

-----------------

注意事项
使用template引出模板参数
类定义中参数使用模板参数
类外成员函数要指明参数


---------------------------
实例化
用某个具体的数据类型替代
类模板的模板参数

类模板的一个实例化类模板对象称为模板类

类模板是抽象的类
模板类是实例化了的类模板的具体类


-----------------------------

但函数模板含有类模板
需要在函数模板外声明类模板的模板参数

fun<int,string>(n);

---------------------------


类模板派生与普通类相同

