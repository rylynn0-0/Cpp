#构造函数和析构函数

##构造函数
是类的特殊成员函数
用于在声明类的对象时
对其数据成员进行初始化

构造函数与类名同名
参数可有可无（可以重载）

不能指定返回类型
一般被声明为公有函数

创建类的对象时被自动调用
在程序的其他部分不能调用
（绝对不允许）

若没有有参的构造函数
会自动生成无参的构造函数

写了有参的构造函数
则不会生成无参的构造函数

建议同时写有参和无参的构造函数

构造函数可以定义为内联函数
在构造函数前加 inline 
运行速度会加快
但是代码长度会加长

构造函数可以设置默认值

可以通过设置默认值来省略无参构造函数



##对象数组
成员是对象的数组

#常规
通过不带参数的构造函数
new产生对象数组，再通过set（）逐个赋值
或者a[i]=A(x,y)-----不建议

#使用二级指针
通过带参数的构造函数
使用二级指针指向一个指针数组
指针数组逐个产生对象
a[i]=new A(x,y)
delete指针数组和二级指针
 


A *c1=new A[3]
指向对象数组的指针

A *c2=new A(2,3)
指向单个对象

A**c3=new A *[3]
指向指针数组的二级指针



##拷贝构造函数

是类的一个公有成员函数


#定义对象参数表给对象

#形参是对象

#返回类型是对象


函数名与类名相同
只有一个参数，即对同类的一个对象的引用
X ( X & c);
X ( const X & c);

没有定义拷贝构造函数
自动生成缺省的拷贝构造函数

定义了拷贝构造函数，
缺省的拷贝构造函数不存在

调用拷贝构造函数
A a = b;
A a (b);

数据含指针时需要写自己的拷贝构造函数

默认缺省的拷贝构造函数为浅拷贝

##浅拷贝
简单的将数据复制给新的对象
如果对象数据含指针
就会出错
因为只是单纯的复制指针的值
而没有创建新的数据空间


##深拷贝
创建独立的数据空间
将指针的值拷贝过去


##析构函数
是一种特殊成员函数
用于终止对象时系统自动调用
用于delete分配给对象的空间

函数名前加~
没有参数
不能加返回值
只能有一个析构
公有函数


对象数组生命期结束时
对象数组的每个元素都会调用
各自的析构函数

使用new动态创建的对象需要delete
才会调用析构函数

函数参数是对象时未加引用会创建临时对象


对象数组析构顺序与构造顺序相反

