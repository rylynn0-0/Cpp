#运算符重载

静态时编译


------------
1.概念

2.作为类的成员函数

3.作为有元函数

---------------
#引入

C++预提供了一组预算符
用于表示对数据的运算

只能用于基本数据类型

c++提供了数据抽象的手段

但是用类的成员函数操作对象有时不方便

如复数加减，

希望直接使用c++提供的运算符
  #程序简洁
  #代码容易理解

---------------------

#运算符重载

对已有的运算符赋予多重含义
使其作用于不同类型的数据产生不同效果

---------
例如：
对于复数加法
需要c1=c1.cadd(c2);
运算符重载后
c1=c1+c2;


---------------------


#实现

通过函数实现

返回类型 operator 运算符（参数表）{}


a += b;
a.operator+=(b);

-----------------

#限制

只能重载已经存在的运算符
不能改变运算的操作数个数，优先级，结合性

操作数必须至少有一个类的对象
否则不能对运算符进行重载

重载运算符不可以缺省参数

除了=，重载运算符可以由派生类继承

---------------------------------

不可重载的运算符

.  .*  ::   ?:  sizeof


----------------------------

实现形式

类成员函数
友元函数

成员函数有this指针
友元函数没有this指针

重载运算符中，
默认this指针对应缺省的一个参数

对于一元运算符，
成员函数运算符重载不需要操作数
this就是所需的参数

重载二元运符，只需显式指明一个操作数

-------------------------------
类外实现
<返回数据类型> X::operator<运算符>（参数）{}

----------------

#友元函数实现

参数个数与操作数个数相同


=，[],->,()
以及类型转换运算符
不能用有元函数形式重载

-----------------------

一元运算符重载

<函数类型> operator ++();
++a;
a.operator++();

<函数类型> operator ++(int);
a++;
a.operator++(1);


--------------------------------

#类型转换

将一种类型的值转换为另一种类型

标准->标准
标准->类
类->标准
类->类

标准类型是除了struct class union
以外的类型

隐式转换------------

级别低的向级别高的转换

表达式赋值给变量

实参 向形参转换

函数返回值

-----------------------
显式转换
强转  :（类型）A;
函数：转化

-----------------